#!/usr/bin/env python
# coding: utf-8

# In[1]:


from dialog_bot_sdk.bot import DialogBot
from dialog_api import messaging_pb2
from dialog_bot_sdk import interactive_media
import matplotlib.pyplot as plt
import pandas as pd
import grpc
import os
import  utils 
import numpy as np


# In[2]:


def make_statistic_by_all_events(bot,peer):
    
    button_full_stat = interactive_media.InteractiveMediaButton("Full_stat", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º")
    button_download = interactive_media.InteractiveMediaButton("Files", "–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")    
    bot.messaging.send_message(
        peer,
        " ",
            [interactive_media.InteractiveMediaGroup(
                [
                interactive_media.InteractiveMedia(
                    1,
                    button_full_stat,
                    style = 'default'
                ),
                interactive_media.InteractiveMedia(
                    2,
                    button_download,
                    style = 'default'
                ),
                ]            
            )]
            )


# In[3]:


def make_user_recommendation(bot,peer):
    data = pd.read_csv("Marks.csv")
    data1 = pd.read_csv("Event_type.csv",  encoding ='cp1251',sep=";")
    data["Num_replies"] = 1 
    a = pd.DataFrame(data.groupby(["Id",'Mark',"Event"]).count()).reset_index()
    print(a)
    events = [];
    events_like = list(a[(a["Mark"] == 5)&(a["Id"] == (peer.id))]["Event"].values)
    events_like = events_like + list((a[(a["Mark"] == 4)&(a["Id"] == (peer.id))]["Event"].values))
    events_like = events_like + list(a[(a["Mark"] == '5')&(a["Id"] == (peer.id))]["Event"].values)
    events_like = events_like + list((a[(a["Mark"] == '4')&(a["Id"] == (peer.id))]["Event"].values))
    print(events_like)
    events_type = []
    for i in events_like:
        events_type = events_type + list(data1[data1["Event"] == i]["Type"].values)
    for i in events_type: 
        events = events + list(data1[data1["Type"] == i]["Event"].values)
    events1 = set(events).difference(set(events_like))  
    if (len(events1) == 0):
        bot.messaging.send_message(
        peer, 
        "–û–π-–æ–π-–æ–π. –ö–∞–∂–µ—Ç—Å—è, –Ω–∞–º –Ω–µ—á–µ–≥–æ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å. –û—Å—Ç–∞–≤–ª—è–π –±–æ–ª—å—à–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –∏ —Ç–æ–≥–¥–∞ –º—ã –ø–æ–¥–±–µ—Ä–µ–º, —á—Ç–æ-—Ç–æ —Å—Ç–æ—è—â–µ–µ." )
    else:
        ev = ", ".join(events1)
        bot.messaging.send_message(
        peer, 
        "üëÅÔ∏è‚Äçüó®Ô∏è–ú–æ–π –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥, —á—Ç–æ —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: "+ str(ev))


# In[4]:


def make_buttons_to_stat(bot,peer,event):
    button_plot = interactive_media.InteractiveMediaButton(event + "plot", "–ì—Ä–∞—Ñ–∏–∫ –æ—Ü–µ–Ω–æ–∫")
    button_feedbacks = interactive_media.InteractiveMediaButton(event + "feed", "–û—Ç–∑—ã–≤—ã")


    bot.messaging.send_message(
        peer,
        "–ö–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?",
            [interactive_media.InteractiveMediaGroup(
                [
                interactive_media.InteractiveMedia(
                    1,
                    button_plot,
                    style = 'primary'
                ),
                interactive_media.InteractiveMedia(
                    2,
                    button_feedbacks,
                    style = 'primary'
                ),
                ]            
            )]
            )


# In[5]:


def make_user_stat(bot,peer):
    data = pd.read_csv("Marks.csv",  encoding ='cp1251')
    fig = plt.figure()
    a = dict(data[data["Id"]==str(peer.id)].groupby('Mark').count()["Event"])
    if(len(a) == 0):
        bot.messaging.send_message(
        peer,
        "–û–π-–æ–π, —Ç—ã –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏üòî –ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ—Å–µ—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Ç–æ —Å–º–µ–ª–æ —É–∑–Ω–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–µ–µ –±–µ–≥–∏ –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è.\n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –≤—ã–±–∏—Ä–∞–π –æ–ø—Ü–∏—é –æ—Ç–∑—ã–≤, –∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–∏—à–∏ –æ—Ü–µ–Ω–∫–∞.",
        ) 
    else:
        patches,text = plt.pie([float(v) for v in a.values()], labels=[str(k) for k in a.keys()], autopct=None) 
        plt.legend(patches, a.keys(), loc="best")
        plt.savefig('img.png')
        bot.messaging.send_image(peer, 'img.png')
        os.remove('img.png')


# In[6]:


def make_admin_stat(bot,peer):
    global admin_stats
    admin_stats = 1
    bot.messaging.send_message(
    peer,
    "–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ò–ª–∏ –∂–µ –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º",
    )
    make_event_buttons(bot,peer,"admin")
    make_statistic_by_all_events(bot,peer)


# In[7]:


statistic = 0
passw = 0
admin_users = []
simple_users = []
admin_stats = 0
event_feed = ""


def make_statistics(bot,peer):
    global statistic
    global admin_users 
    global simple_users 
    global admin_stats
    
    if (peer.id in admin_users):
        
        bot.messaging.send_message(
        peer,
        "–î–∞ –≤—ã –∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        )
        admin_stats = 1
        make_event_buttons(bot,peer,"admin")
        make_statistic_by_all_events(bot,peer)
    else:   
        if (peer.id in simple_users):
            bot.messaging.send_message(
            peer,
            "–ü—Ä–∏–≤–µ—Ç –º–æ–π –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ê –≤–æ—Ç –∏ —Ç–≤–æ—è –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ü–µ–Ω–æ–∫",
            )
            make_user_stat(bot,params[0].peer)
        else:
            bot.messaging.send_message(
            peer,
            "–û–∫–µ–π, –≤—Ä–µ–º—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! –ù–æ –æ—Ç–≤–µ—Ç—å-–∫–∞ –º–Ω–µ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:\n –¢—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? (–î–∞/–Ω–µ—Ç)",
            )
            statistic = 1
            
    


# In[8]:


def make_mark_buttons(bot,peer):
    global flag_mark
    buttons = []
    for i in range(5):
        buttons.append(interactive_media.InteractiveMedia(str(i+5),interactive_media.InteractiveMediaButton("mark"+str(i+1), str(i+1)),style='danger'))
    bot.messaging.send_message(
        peer,
        "–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –æ—Ç 1 - 5",
        [interactive_media.InteractiveMediaGroup(
          buttons
        )]
    )
    flag_mark = 0 
        


# In[9]:


def make_reply_buttons(bot, peer,event):
    global flag_event
    outpeer = bot.manager.get_outpeer(peer) 
    
    button_feedback = interactive_media.InteractiveMediaButton("Feedback1", "–û—Ç–∑—ã–≤")
    button_mark = interactive_media.InteractiveMediaButton("Feedback2", "–û—Ü–µ–Ω–∫–∞")
    
    bot.messaging.send_message(
        peer,
        "–û—á–µ–Ω—å –∂–¥–µ–º —Ç–≤–æ–µ–≥–æ –º–Ω–µ–Ω–∏—è –æ " + str(event),
        [interactive_media.InteractiveMediaGroup(
            [
                interactive_media.InteractiveMedia(
                    1,
                    button_feedback,
                    style = 'primary'
                ),
                interactive_media.InteractiveMedia(
                    2,
                    button_mark,
                    style = 'primary'
                ),
            ]            
        )]
    )
    flag_event = 0


# In[10]:


flag_event = 0
flag_reply = 0
flag_mark = 0
flag_reply_from_start = 0
flag_statistics = 0
users = []
def write_descp(bot, peer,descp,event, msg):
    outpeer = bot.manager.get_outpeer(peer)
    global flag_event
    global flag_reply
    bot.messaging.send_message(
        peer, 
        "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" + str(event) +'\n' + str(descp)+'\n')
    
    if(msg == 0):
        bot.messaging.send_message(
        peer, 
        "–ï—Å–ª–∏ —Ç—ã —É–∂–µ –±—ã–ª –Ω–∞ —ç—Ç–æ–º –∫—Ä—É—Ç–µ–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, —Ç–æ –æ—Å—Ç–∞–≤–ª—è–π –æ—Ç–∑—ã–≤, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –µ–≥–æ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤üîî\n")
    else:
        flag_reply = 1
        bot.messaging.send_message(
        peer, 
        "–†–∞–∑ —Ç—ã —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª, —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–∏—à–∏ –≤—Å—ë, —á—Ç–æ –æ –Ω—ë–º –¥—É–º–∞–µ—à—å:).\n")
    flag_event = event

    
    


# In[11]:


def make_event_buttons(bot, peer,msg):
    
    outpeer = bot.manager.get_outpeer(peer)
    history = bot.messaging.load_message_history(outpeer, limit=10, direction=messaging_pb2.LISTLOADMODE_BACKWARD).history

    
    event = pd.read_csv("Events.csv",encoding = 'cp1251', sep =";")
    list_of_events = list(event["Event"].unique())
    buttons = []
    for i in range(len(list_of_events)):
        buttons.append(interactive_media.InteractiveMedia(i,interactive_media.InteractiveMediaButton(list_of_events[i],list_of_events[i]),style = 'primary'))
        
    bot.messaging.send_message(
        peer,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
        [interactive_media.InteractiveMediaGroup(
        buttons
        )]
    )
    
    for msg in history:
        if msg.sender_uid != peer.id:
            return bot.messaging.update_message(msg, msg.message.textMessage.text)


# In[12]:


def on_click(*params):

    global flag_event
    global flag_reply
    global flag_reply_from_start
    global event_feed
    global admin_stats
    uid = params[0].uid
    which_button = params[0].value

    event = pd.read_csv("Events.csv",  encoding ='cp1251', sep=";")
    list_of_events = list(event["Event"].unique())
    events_plot1 = list(event["Event"].unique())
    events_feedbacks1 = list(event["Event"].unique())
    events_plot = []
    events_feedbacks = []
    for i in range(len(events_plot1)):
        events_plot.append(events_plot1[i] + 'plot')
    for i in range(len(events_feedbacks1)):
        events_feedbacks.append(events_feedbacks1[i] + 'feed')

    list_of_marks = []
    for i in range(1, 6):
        list_of_marks.append("mark" + str(i))
    peer = bot.users.get_user_peer_by_id(uid)
    if (which_button == 'Inform'):
        make_event_buttons(bot, peer, "noth")
    if (which_button in list_of_events):
        if (admin_stats):
            make_buttons_to_stat(bot, peer, which_button)
        else:
            write_descp(
                bot, peer,
                event[event["Event"] == which_button]["Description"].values[0],
                which_button, flag_reply_from_start)
    if (which_button == 'Feedback1'):
        flag_reply = 1
        bot.messaging.send_message(
            peer, "–ü–∏—à–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è. –ö—Ä–∏—Ç–∏–∫–∞ - —ç—Ç–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Çüòâ")
    if (which_button == 'Feedback2'):
        make_mark_buttons(bot, peer)
    if (which_button in list_of_marks):
        bot.messaging.send_message(
            peer,
            "C–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –æ—Ü–µ–Ω–∫—É!\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∂–µ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –ø–∏—à–∏ –º–Ω–µ!"
        )
        data = pd.DataFrame(columns=["Id", 'Event', 'Mark'])
        array = [str(peer.id)] + [str(flag_event)] + [which_button[-1]]
        data.loc[0] = array
        data.to_csv("Marks.csv", mode='a', header=False)
        flag_event = 0
        flag_reply = 0
    if (which_button == 'Feedback'):
        bot.messaging.send_message(peer, "–î–∞–≤–∞–π-–∫–∞ –≤—ã–±–µ—Ä–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        flag_reply_from_start = 1
        make_event_buttons(bot, peer, "")
    if (which_button == 'Stat'):
        make_statistics(bot, peer)
    if (which_button in events_plot):
        data = pd.read_csv("Marks.csv",  encoding ='cp1251')
        fig = plt.figure()
        a = dict(data[data["Event"] == which_button[:-4]].groupby(
            'Mark').count()["Event"])
        if (len(a) == 0):
            bot.messaging.send_message(peer, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –æ—Ü–µ–Ω–∫–∞–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
        else:
            patches, text = plt.pie([float(v) for v in a.values()],
                                    labels=[str(k) for k in a.keys()],
                                    autopct=None)
            plt.title(which_button[:-4])
            plt.legend(patches, a.keys(), loc="best")
            plt.savefig('img.png')
            bot.messaging.send_image(peer, 'img.png')
            os.remove('img.png')
    if (which_button in events_feedbacks):
        data = pd.read_csv("Df_to_pred.csv", error_bad_lines=False,sep =';')
        bot.messaging.send_message(
            peer, "–ò—Ç–∞–∫, –≤—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é: " +
            str(len(data[data["Event"] == which_button[:-4]]['Target'])))
        event_feed = which_button[:-4]
        bot.messaging.send_message(peer, "–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?")
    if (which_button == 'Reccom'):
        make_user_recommendation(bot, peer)
    if (which_button == 'Full_stat'):
        data = pd.read_csv("Marks.csv")
        data1 = pd.read_csv("Df_to_pred.csv", error_bad_lines=False,sep =';')


        data = data[data["Event"]!='0']
        data1 = data1[data1["Event"]!='0']
        data = data[data["Event"]!=0]
        data1 = data1[data1["Event"]!=0]
        if (len(data) == 0):
            bot.messaging.send_message(peer, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –æ—Ü–µ–Ω–∫–∞–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
        else:
            ax0 = (pd.DataFrame(data.groupby(
                ['Event'])["Id"].count()).rename(columns={
                    "Id": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫"
                }).plot(kind='bar', figsize=(25, 10), rot=0))
            ax0.set_title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", fontsize=36)
            plt.savefig('img.png')
            bot.messaging.send_image(peer, 'img.png')
            os.remove('img.png')
        if (len(data1) == 0):
            bot.messaging.send_message(peer, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –æ—Ç–∑—ã–≤–∞–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
        else:
            ax1 = (pd.DataFrame(data1.groupby(
                ['Event'])["Id"].count()).rename(columns={
                    "Id": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"
                }).plot(kind='bar', figsize=(25, 10), rot=0))
            ax1.set_title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", fontsize=36)
            plt.savefig('img.png')
            bot.messaging.send_image(peer, 'img.png')
            os.remove('img.png')
    if (which_button == 'Files'):
        bot.messaging.send_file(peer, "Marks.csv")
        bot.messaging.send_file(peer,"Df_to_pred.csv")


# In[13]:


def on_msg(*params):
    global flag_event
    global flag_reply
    global flag_mark
    global statistic
    global passw
    global users
    global admin_users
    global simple_users
    global event_feed
    global statistic
    global admin_stats
    admin_stats = 0
    new = 0
    if params[0].peer.id not in users:
        users.append(params[0].peer.id)
        new = 1

    if (flag_reply == 1):
        bot.messaging.send_message(
            params[0].peer,
            "–°–ø–∞—Å–∏–±–æ —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ! –ñ–¥–∏ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä—É—Ç—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö!\n–ï—Å–ª–∏ –∂–µ —Ç—ã —Ö–æ—á–µ—à—å –µ—â–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é, —Ç–æ —Å–º–µ–ª–æ –ø–∏—à–∏ –æ—Ü–µ–Ω–∫–∞. "
        )
        text = '"' + str(params[0].message.textMessage.text) + '"'
        data = pd.DataFrame(columns=["Id", 'Event', 'Mark'])
        array = [str(params[0].peer.id)] + [str(flag_event)] + [text]
        data.loc[0] = array
        data.to_csv("Df_to_pred.csv", mode="a", header=False)
        flag_reply = 0
        flag_reply_from_start = 0
        flag_mark = 1
    else:
        if ((str(params[0].message.textMessage.text).lower() == '–æ—Ü–µ–Ω–∫–∞')
                and (flag_mark != 0)):
            make_mark_buttons(bot, params[0].peer)
        else:
            if ((str(params[0].message.textMessage.text).lower() == '–æ—Ç–∑—ã–≤')
                    and ((flag_event != 0))):
                make_reply_buttons(bot, params[0].peer, flag_event)

            else:
                if ((str(params[0].message.textMessage.text).lower() == '–¥–∞')
                        and (statistic == 1)):
                    params1 = bot.messaging.send_message(
                        params[0].peer,
                        "–°–∏–ª—å–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ. –¢–æ–≥–¥–∞ –Ω–µ –≤–≤–µ–¥–µ—à—å –∫–∞ –ª–∏ —Ç—ã –ø–∞—Ä–æ–ª—å?(–¢–∞–∫ –∏ –±—ã—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–∞—Ä–æ–ª—å admin)"
                    )
                    passw = 1
                else:
                    if ((str(params[0].message.textMessage.text).lower() ==
                         '–Ω–µ—Ç') and ((statistic != 0))):
                        params1 = bot.messaging.send_message(
                            params[0].peer,
                            "–•–æ—Ä–æ—à–æ. –¢–æ–≥–¥–∞ –≤–æ—Ç —Ç–µ–±–µ –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Ç–≤–æ–∏–º –æ—Ç–∑—ã–≤–∞–º.\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö –æ—Ü–µ–Ω–æ–∫"
                        )
                        make_user_stat(bot, params[0].peer)
                    else:
                        if ((passw == 1)):
                            if (str(params[0].message.textMessage.text) ==
                                    'admin'):
                                params1 = bot.messaging.send_message(
                                    params[0].peer,
                                    "–í–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ—é. –Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ªüßê –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
                                )
                                admin_users.append(params[0].peer.id)
                                passw = 0
                                make_admin_stat(bot, params[0].peer)
                            else:
                                if (str(params[0].message.textMessage.text) ==
                                        'stop'):
                                    params1 = bot.messaging.send_message(
                                        params[0].peer,
                                        "–ù—É —á—Ç–æ —Ö–∞–∫–µ—Äüòé, –Ω–∞–¥–æ–µ–ª–æ? –¢–æ–ª—å–∫–æ –Ω–µ –æ–±–∏–∂–∞–π—Å—è:) –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, –µ—Å–ª–∏ –±—ã –≤ –ø–∞—Ä–æ–ª–µ –±—ã–ª–æ –≤—Å–µ–≥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤, –∞ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ—è–ª–∞ –±—ã –æ–¥–Ω–∞ –∏–∑ 32 –±—É–∫–≤, —Ç–æ —Ç–µ–±–µ –±—ã –ø—Ä–∏—à–ª–æ—Å—å –ø–µ—Ä–µ–±—Ä–∞—Ç—å 33554432 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤üò®\n –ù–µ —Å–∞–º–∞—è —Ç—Ä—É–¥–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –Ω–æ –∫—Ç–æ —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Ç—É—Ç 5 —Å–∏–º–≤–æ–ª–æ–≤:)\n –û —á–µ–º —ç—Ç–æ —è? –ê—Ö –¥–∞, –≤–æ—Ç —Ç–≤–æ–π –¥–æ–ø—É—Å–∫ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
                                    )
                                    simple_users.append(params[0].peer.id)
                                    passw = 0
                                    make_user_stat(bot, params[0].peer)
                                else:
                                    params1 = bot.messaging.send_message(
                                        params[0].peer,
                                        "–•–º, –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Çüò¨. –ü–æ–ø—Ä–æ–±—É–π-–∫–∞ –µ—â—ë, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏ stop –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ user-a."
                                    )
                        else:
                            if (event_feed != ''):
                                data = pd.read_csv("Df_to_pred.csv", error_bad_lines=False,sep =';')
                                try:
                                    int(params[0].message.textMessage.text)
                                    if (int(params[0].message.textMessage.text) >
                                        len(data[data["Event"] == event_feed]
                                            ['Target'])):
                                        params1 = bot.messaging.send_message(
                                        params[0].peer,
                                        "–•–º, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑")
                                    else:
                                        num_feeds = int(
                                        params[0].message.textMessage.text)
                                        params1 = bot.messaging.send_message(
                                        params[0].peer,
                                        "–ò—Ç–∞–∫ –≤–æ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é " +
                                        event_feed)

                                        feeds = data[
                                        data["Event"] ==
                                        event_feed]['Target'].values[:]
                                        for i in range(num_feeds):
                                            params1 = bot.messaging.send_message(
                                            params[0].peer, feeds[i])
                                        event_feed = ''
                                except:
                                    params1 = bot.messaging.send_message(
                                        params[0].peer,
                                        "–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ù–µ –ø—ã—Ç–∞–π—Å—è –æ–±–º–∞–Ω—É—Ç—å –º–µ–Ω—èü§ì"
                                        )
                                        
                                            
 
                            else:
                                flag_mark = 0
                                if (new == 1):
                                    params1 = bot.messaging.send_message(
                                        params[0].peer,
                                        "–ü—Ä–∏–≤–µ—ÇüòÄ –ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –Ω–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüéôÔ∏èüéµ\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤, –∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
                                    )
                                else:
                                    params1 = bot.messaging.send_message(
                                        params[0].peer,
                                        "–ö–∞–∂–µ—Ç—Å—è, –º—ã —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µü§î. –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ—Ç–∑—ã–≤–æ–≤ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏? –û–¥–æ–±—Ä—è—é!\n–ñ–º–∏ –∂–µ —Å–∫–æ—Ä–µ–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."
                                    )
                                button_inf = interactive_media.InteractiveMediaButton(
                                    "Inform", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                                button_feedback = interactive_media.InteractiveMediaButton(
                                    "Feedback", "–û—Ç–∑—ã–≤")
                                button_stats = interactive_media.InteractiveMediaButton(
                                    "Stat", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                                button_recommendations = interactive_media.InteractiveMediaButton(
                                    "Reccom", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                                bot.messaging.send_message(
                                    params[0].peer, " ", [
                                        interactive_media.
                                        InteractiveMediaGroup([
                                            interactive_media.InteractiveMedia(
                                                1, button_inf,
                                                style='primary'),
                                            interactive_media.InteractiveMedia(
                                                2,
                                                button_feedback,
                                                style='primary'),
                                            interactive_media.InteractiveMedia(
                                                3,
                                                button_stats,
                                                style='primary'),
                                            interactive_media.InteractiveMedia(
                                                4,
                                                button_recommendations,
                                                style='primary'),
                                        ])
                                    ])


# In[14]:


if __name__ == '__main__':
    
    bot = DialogBot.get_secure_bot(
        "hackathon-mob.transmit.im",  # bot endpoint from environment
        grpc.ssl_channel_credentials(), # SSL credentials (empty by default!)
        "be9ca5de6087c9ac19824217526cbd2c61519ada"  # bot token from environment
    )
    

    bot.messaging.on_message(on_msg, on_click)

